[{"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\index.js":"1","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\App.js":"2","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\reportWebVitals.js":"3","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\Classifications.js":"4","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\api\\trefle.js":"5","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\Navigation.js":"6","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\LandingPage.js":"7","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\SearchPage.js":"8","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\Search.js":"9","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\ListCard.js":"10","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\PageHeader.js":"11","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\SectionHeader.js":"12","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\FilterMenu.js":"13","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\PlantPage.js":"14","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\CategoryPage.js":"15","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\hooks\\useFetch.js":"16","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\ImageGallery.js":"17","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\ImageGrid.js":"18","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\Map.js":"19","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\Table.js":"20"},{"size":266,"mtime":1608148438002,"results":"21","hashOfConfig":"22"},{"size":1289,"mtime":1609097547502,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1606495291126,"results":"24","hashOfConfig":"22"},{"size":3230,"mtime":1608400418526,"results":"25","hashOfConfig":"22"},{"size":222,"mtime":1608409068115,"results":"26","hashOfConfig":"22"},{"size":788,"mtime":1609100322707,"results":"27","hashOfConfig":"22"},{"size":1388,"mtime":1608404960075,"results":"28","hashOfConfig":"22"},{"size":6545,"mtime":1609100560434,"results":"29","hashOfConfig":"22"},{"size":1074,"mtime":1608579468934,"results":"30","hashOfConfig":"22"},{"size":1600,"mtime":1608579351977,"results":"31","hashOfConfig":"22"},{"size":802,"mtime":1608583863118,"results":"32","hashOfConfig":"22"},{"size":1306,"mtime":1609098273997,"results":"33","hashOfConfig":"22"},{"size":2431,"mtime":1608579491589,"results":"34","hashOfConfig":"22"},{"size":19550,"mtime":1609101507560,"results":"35","hashOfConfig":"22"},{"size":1696,"mtime":1608584053725,"results":"36","hashOfConfig":"22"},{"size":721,"mtime":1608581085397,"results":"37","hashOfConfig":"22"},{"size":3057,"mtime":1609092223601,"results":"38","hashOfConfig":"22"},{"size":1001,"mtime":1609011579730,"results":"39","hashOfConfig":"22"},{"size":2569,"mtime":1609100438059,"results":"40","hashOfConfig":"22"},{"size":1918,"mtime":1609101569879,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1lznqms",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\index.js",[],["87","88"],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\App.js",["89"],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\reportWebVitals.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\Classifications.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\api\\trefle.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\Navigation.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\LandingPage.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\SearchPage.js",["90","91","92","93","94","95"],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\Search.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\ListCard.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\PageHeader.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\SectionHeader.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\FilterMenu.js",["96"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { withStyles,makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    filterButton: {\r\n        width: '100%',\r\n        height: '100%',\r\n        marginLeft: '10px'\r\n    }\r\n}));\r\n\r\nconst StyledMenu = withStyles({\r\n    paper: {\r\n      border: '1px solid #d3d4d5',\r\n    },\r\n  })((props) => (\r\n    <Menu\r\n      elevation={0}\r\n      getContentAnchorEl={null}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'center',\r\n      }}\r\n      transformOrigin={{\r\n        vertical: 'top',\r\n        horizontal: 'center',\r\n      }}\r\n      {...props}\r\n    />\r\n  ));\r\n  \r\n  const StyledMenuItem = withStyles((theme) => ({\r\n    root: {\r\n      '&:focus': {\r\n        backgroundColor: theme.palette.primary.main,\r\n        '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n          color: theme.palette.common.white,\r\n        },\r\n      },\r\n    },\r\n  }))(MenuItem);\r\n  \r\n  const FilterMenu = () => {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n  \r\n    const handleClick = (event) => {\r\n      setAnchorEl(event.currentTarget);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setAnchorEl(null);\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <Button\r\n          aria-controls=\"customized-menu\"\r\n          aria-haspopup=\"true\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          size=\"large\"\r\n          className={classes.filterButton}\r\n          onClick={handleClick}\r\n        >\r\n          Filters\r\n        </Button>\r\n        <StyledMenu\r\n          id=\"customized-menu\"\r\n          anchorEl={anchorEl}\r\n          keepMounted\r\n          open={Boolean(anchorEl)}\r\n          onClose={handleClose}\r\n        >\r\n          <StyledMenuItem>\r\n\r\n            <ListItemText primary=\"Sent mail\" />\r\n          </StyledMenuItem>\r\n          <StyledMenuItem>\r\n\r\n            <ListItemText primary=\"Drafts\" />\r\n          </StyledMenuItem>\r\n          <StyledMenuItem>\r\n   \r\n            <ListItemText primary=\"Inbox\" />\r\n          </StyledMenuItem>\r\n        </StyledMenu>\r\n      </div>\r\n    );\r\n  }\r\n\r\nFilterMenu.propTypes = {\r\n\r\n}\r\n\r\nexport default FilterMenu\r\n","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\PlantPage.js",["97","98","99","100","101","102","103"],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\CategoryPage.js",["104"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport PageHeader from '../components/PageHeader';\r\nimport SectionHeader from '../components/SectionHeader';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n}));\r\n\r\nconst CategoryPage = () => {\r\n    const classes = useStyles();\r\n    let { category } = useParams();\r\n    return (\r\n        <div>\r\n              <PageHeader \r\n                heading={category.split('-').join(' ')}\r\n                subtext='Lorem ipsum dolor sit amet consectetur, adipisicing elit. Repellat vero, dicta labore sit ipsum corrupti natus! Quidem sint perferendis, beatae sit dicta, quasi non iure placeat asperiores, alias vel nesciunt. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Repellat vero, dicta labore sit ipsum corrupti natus! Quidem sint perferendis, beatae sit dicta, quasi non iure placeat asperiores, alias vel nesciunt.'\r\n            />\r\n              <SectionHeader  \r\n                heading='Section'\r\n                subtext=''\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nCategoryPage.propTypes = {\r\n    category: PropTypes.string\r\n}\r\n\r\nexport default CategoryPage\r\n\r\n// On Load\r\n// ---------\r\n// Switch statement to determine category selected and return a request url per case\r\n// useEffect to retrieve plant data by request url\r\n// category needs to be in the url and passed as a prop for on page loads\r\n\r\n// Page Sections\r\n// ---------------\r\n\r\n\r\n// UI\r\n// ---------\r\n// Page will be broken into 12 grid layout\r\n// 3 points are for page nav which includes assess to sections\r\n// 9 points are for the pages content","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\hooks\\useFetch.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\ImageGallery.js",["105","106"],"import React from 'react'\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { makeStyles, withStyles  } from '@material-ui/core/styles';\r\n\r\nimport {AppBar,Tabs,Tab,Typography,Box} from '@material-ui/core';\r\n\r\nimport ImageGrid from './ImageGrid';\r\n\r\n// Panel in which images are placed.\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      \r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n  \r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n  \r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `scrollable-auto-tab-${index}`,\r\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    width: '100%',\r\n  },\r\n  tabContainer: {\r\n    boxShadow: 'none',\r\n    padding: '24px 24px'\r\n  },\r\n}));\r\n\r\nconst StyledTabs = withStyles({\r\n  indicator: {\r\n    display: 'none',\r\n   \r\n  },\r\n})((props) => <Tabs {...props} TabIndicatorProps={{ children: <span /> }} />);\r\n\r\nconst StyledTab = withStyles((theme) => ({\r\n  root: {\r\n    textTransform: 'none',\r\n    color: '#fff !important',\r\n    borderRadius: '5px',\r\n    background: '#707070',\r\n    marginRight: theme.spacing(1),\r\n    '&:focus': {\r\n      opacity: 1,\r\n    },\r\n  },\r\n}))((props) => <Tab disableRipple {...props} />);\r\n\r\nconst ImageGallery = ({imageArray}) => {\r\n    const classes = useStyles();\r\n    \r\n    const [value, setValue] = React.useState(0);\r\n  \r\n    const handleChange = (event, newValue) => {\r\n      setValue(newValue);\r\n    };\r\n\r\n    let imageCategories = Object.entries(imageArray);\r\n\r\n    // Not every plant will have images for each category so only create tabs for images found.\r\n    let tabs = imageCategories.map((cat,i) => {\r\n      if(cat[0] != '') {\r\n        return <StyledTab key={i} label={`${cat[0]}`} {...a11yProps(i)} />\r\n      }\r\n    });\r\n    \r\n    // Same as tabs.\r\n    let tabPanels = imageCategories.map((cat,i) => {\r\n      return <TabPanel key={i} value={value} index={i} className={classes.tabPanel}><ImageGrid images={cat[1]}/></TabPanel>\r\n    });\r\n    \r\n    return (\r\n      <div className={classes.root}>\r\n        <AppBar className={classes.tabContainer} position=\"static\" color=\"transparent\">\r\n          <StyledTabs\r\n            value={value}\r\n            onChange={handleChange}\r\n            indicatorColor=\"#fff\"\r\n            textColor=\"#fff\"\r\n            variant=\"scrollable\"\r\n            scrollButtons=\"auto\"\r\n            aria-label=\"Tabs for image gallery\"\r\n          >\r\n            {tabs}\r\n          </StyledTabs >\r\n        </AppBar>\r\n        {tabPanels}\r\n    </div>\r\n    )\r\n}\r\n\r\nImageGallery.propTypes = {\r\n    imageArray: PropTypes.array\r\n}\r\n\r\nexport default ImageGallery\r\n","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\ImageGrid.js",["107"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Grid} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n      image :{\r\n          width: '100%',\r\n          height: 'auto'\r\n      }\r\n  }));\r\n\r\nconst ImageGrid = ({images}) => {\r\n const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container justify=\"flex-start\" direction=\"row\" wrap=\"wrap\" spacing={1}>\r\n            {images.map((image, i) => (\r\n                <Grid key={i} item className={classes.imageContainer} xs={12} sm={6} lg={4}>\r\n                    <a href={image.image_url} target=\"_blank\">\r\n                    <img className={classes.image} src={image.image_url} alt={image.copyright} />\r\n                    </a>\r\n              \r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nImageGrid.propTypes = {\r\n    images: PropTypes.array\r\n}\r\n\r\nexport default ImageGrid\r\n","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\Map.js",["108","109"],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\Table.js",["110","111"],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":1,"column":42,"nodeType":"118","messageId":"119","endLine":1,"endColumn":48},{"ruleId":"116","severity":1,"message":"120","line":1,"column":26,"nodeType":"118","messageId":"119","endLine":1,"endColumn":35},{"ruleId":"116","severity":1,"message":"121","line":5,"column":8,"nodeType":"118","messageId":"119","endLine":5,"endColumn":17},{"ruleId":"116","severity":1,"message":"122","line":7,"column":8,"nodeType":"118","messageId":"119","endLine":7,"endColumn":14},{"ruleId":"116","severity":1,"message":"123","line":78,"column":12,"nodeType":"118","messageId":"119","endLine":78,"endColumn":25},{"ruleId":"116","severity":1,"message":"124","line":78,"column":27,"nodeType":"118","messageId":"119","endLine":78,"endColumn":43},{"ruleId":"116","severity":1,"message":"125","line":80,"column":28,"nodeType":"118","messageId":"119","endLine":80,"endColumn":33},{"ruleId":"116","severity":1,"message":"121","line":2,"column":8,"nodeType":"118","messageId":"119","endLine":2,"endColumn":17},{"ruleId":"116","severity":1,"message":"120","line":1,"column":16,"nodeType":"118","messageId":"119","endLine":1,"endColumn":25},{"ruleId":"116","severity":1,"message":"126","line":1,"column":26,"nodeType":"118","messageId":"119","endLine":1,"endColumn":34},{"ruleId":"116","severity":1,"message":"127","line":9,"column":8,"nodeType":"118","messageId":"119","endLine":9,"endColumn":18},{"ruleId":"116","severity":1,"message":"128","line":17,"column":8,"nodeType":"118","messageId":"119","endLine":17,"endColumn":24},{"ruleId":"116","severity":1,"message":"129","line":18,"column":8,"nodeType":"118","messageId":"119","endLine":18,"endColumn":15},{"ruleId":"116","severity":1,"message":"125","line":69,"column":39,"nodeType":"118","messageId":"119","endLine":69,"endColumn":44},{"ruleId":"130","severity":1,"message":"131","line":86,"column":37,"nodeType":"132","endLine":86,"endColumn":150},{"ruleId":"116","severity":1,"message":"133","line":15,"column":11,"nodeType":"118","messageId":"119","endLine":15,"endColumn":18},{"ruleId":"134","severity":1,"message":"135","line":89,"column":44,"nodeType":"136","messageId":"137","endLine":89,"endColumn":46},{"ruleId":"138","severity":1,"message":"139","line":90,"column":17,"nodeType":"140","messageId":"141","endLine":90,"endColumn":19},{"ruleId":"142","severity":1,"message":"143","line":21,"column":47,"nodeType":"144","endLine":21,"endColumn":62},{"ruleId":"116","severity":1,"message":"145","line":6,"column":9,"nodeType":"118","messageId":"119","endLine":6,"endColumn":13},{"ruleId":"116","severity":1,"message":"146","line":6,"column":14,"nodeType":"118","messageId":"119","endLine":6,"endColumn":19},{"ruleId":"116","severity":1,"message":"146","line":10,"column":8,"nodeType":"118","messageId":"119","endLine":10,"endColumn":13},{"ruleId":"142","severity":1,"message":"143","line":36,"column":78,"nodeType":"144","endLine":36,"endColumn":93},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'PropTypes' is defined but never used.","'trefle' is defined but never used.","'requestParams' is assigned a value but never used.","'setRequestParams' is assigned a value but never used.","'error' is assigned a value but never used.","'useState' is defined but never used.","'PageHeader' is defined but never used.","'LocalFloristIcon' is defined but never used.","'EcoIcon' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'classes' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'Grid' is defined but never used.","'Paper' is defined but never used.","no-global-assign","no-unsafe-negation"]