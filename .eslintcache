[{"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\index.js":"1","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\App.js":"2","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\reportWebVitals.js":"3","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\Classifications.js":"4","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\api\\trefle.js":"5","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\Navigation.js":"6","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\LandingPage.js":"7","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\SearchPage.js":"8","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\Search.js":"9","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\ListCard.js":"10","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\PageHeader.js":"11","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\SectionHeader.js":"12","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\FilterMenu.js":"13","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\PlantPage.js":"14","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\CategoryPage.js":"15","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\hooks\\useFetch.js":"16","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\ImageGallery.js":"17","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\ImageGrid.js":"18","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\Map.js":"19","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\Table.js":"20"},{"size":266,"mtime":1608148438002,"results":"21","hashOfConfig":"22"},{"size":1301,"mtime":1609177103176,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1606495291126,"results":"24","hashOfConfig":"22"},{"size":3230,"mtime":1608400418526,"results":"25","hashOfConfig":"22"},{"size":222,"mtime":1608409068115,"results":"26","hashOfConfig":"22"},{"size":788,"mtime":1609100322707,"results":"27","hashOfConfig":"22"},{"size":4787,"mtime":1609206273782,"results":"28","hashOfConfig":"22"},{"size":10479,"mtime":1609201491357,"results":"29","hashOfConfig":"22"},{"size":1074,"mtime":1608579468934,"results":"30","hashOfConfig":"22"},{"size":1725,"mtime":1609176187225,"results":"31","hashOfConfig":"22"},{"size":802,"mtime":1608583863118,"results":"32","hashOfConfig":"22"},{"size":1111,"mtime":1609174590875,"results":"33","hashOfConfig":"22"},{"size":2431,"mtime":1608579491589,"results":"34","hashOfConfig":"22"},{"size":19167,"mtime":1609264284039,"results":"35","hashOfConfig":"22"},{"size":1696,"mtime":1608584053725,"results":"36","hashOfConfig":"22"},{"size":829,"mtime":1609257780480,"results":"37","hashOfConfig":"22"},{"size":3057,"mtime":1609092223601,"results":"38","hashOfConfig":"22"},{"size":1001,"mtime":1609011579730,"results":"39","hashOfConfig":"22"},{"size":2569,"mtime":1609100438059,"results":"40","hashOfConfig":"22"},{"size":1918,"mtime":1609101569879,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1lznqms",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"44"},"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\index.js",[],["92","93"],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\App.js",["94"],"import { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport LandingPage from './containers/LandingPage'\nimport SearchPage from './containers/SearchPage'\nimport PlantPage from './containers/PlantPage'\nimport CategoryPage from './containers/CategoryPage'\n\nimport Navigation from './components/Navigation'\n\nimport { Container,CssBaseline } from '@material-ui/core'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport './App.css'\n\nconst useStyles = makeStyles({\n  container: {\n    padding: '10px',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  app: {\n    backgroundColor: '#FFF',\n  }\n});\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.app}>\n      <CssBaseline />\n      <Navigation />\n      <Container maxWidth=\"lg\" className={classes.container}>\n        <Router>\n          <Route exact path='/'>\n            <LandingPage/>\n          </Route>\n          <Route exact path='/search/:pageNumber'>\n            <SearchPage/>\n          </Route>\n          <Route exact path='/plant/:id'>\n            <PlantPage/>\n          </Route>\n          <Route exact path='/category/:category'>\n            <CategoryPage/>\n          </Route>\n        </Router>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n\n","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\reportWebVitals.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\Classifications.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\api\\trefle.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\Navigation.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\LandingPage.js",["95"],"// @ Description\r\n// Asks user of which 3 categories they fall under\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport {Button,Grid,Paper} from '@material-ui/core/';\r\n\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'flex-start',\r\n    },\r\n    headerContainer: {\r\n        margin: '100px 0px'\r\n    },\r\n    panelContainer: {\r\n        padding: '0px !important',\r\n        marginBottom: '30px'\r\n    },\r\n    panel: {\r\n        backgroundColor:'#E9EDC9',color:'#333',padding: '0px',height: '100%', borderRadius: '5px',marginBottom: '10px'\r\n    },\r\n    image: {\r\n        display: 'block',\r\n        borderRadius: '5px',\r\n        backgroundSize: 'cover',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundPosition: 'center',\r\n        width: '100%',\r\n        maxHeight: '290px',\r\n        minHeight: '290px',\r\n        objectFit: 'cover'\r\n    },\r\n    mb20: {\r\n        marginBottom: '20px'\r\n    },\r\n    buttonContainer: {\r\n        marginBottom: '60px'\r\n    },\r\n    button: {\r\n    padding: '0px'\r\n    },\r\n    buttonLink: {\r\n        padding: '20px 40px',\r\n        color:'#fff',\r\n        textDecoration: 'none',\r\n        width: '100%',\r\n        height: '100%'\r\n    }\r\n  });\r\n\r\nconst LandingPage = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container direction=\"column\" spacing={5}>\r\n                <Grid item className={classes.headerContainer}>\r\n                    <h1>[APP NAME]</h1>\r\n                    <h4>Explore over 400 thousand plants found across the world.</h4>\r\n                </Grid>\r\n                <Grid item className={classes.panelContainer}>\r\n                    <h3>This app if for...</h3>\r\n                    <Grid container direction=\"column\">\r\n                        <Grid item className={classes.panel}>\r\n                            <Grid container direction=\"row\" spacing={4} wrap=\"wrap\" alignItems=\"center\">\r\n                                <Grid item sm md lg>\r\n                                    <img src=\"/images/gardener.jpg\" alt=\"\" className={classes.image}/>\r\n                                </Grid>\r\n                                <Grid item sm={12} md={8} lg={8}>\r\n                                    <h3>Gardeners</h3>\r\n                                    <p>We provide detailed information on how you should grow your desired plant.</p>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item className={classes.panel}>\r\n                            <Grid container direction=\"row\" spacing={4} wrap=\"wrap\" alignItems=\"center\">\r\n                                <Grid item sm md lg>\r\n                                    <img src=\"/images/researcher.jpg\" alt=\"\" className={classes.image}/>\r\n                                </Grid>\r\n                                <Grid item sm={12} md={8} lg={8}>\r\n                                    <h3>Researchers</h3>\r\n                                    <p>We provide a robust searching tool to access botanical data and published sources per each plant.</p>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item className={classes.panel}>\r\n                            <Grid container direction=\"row\" spacing={4} wrap=\"wrap\" alignItems=\"center\">\r\n                                <Grid item sm md lg>\r\n                                    <img src=\"/images/nature-lover.jpg\" alt=\"\" className={classes.image}/>\r\n                                </Grid>\r\n                                <Grid item sm={12} md={8} lg={8}>\r\n                                    <h3>Nature Lovers</h3>\r\n                                    <p>Explore plants in a context that you will understand.</p>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <p>Note: <i>Some entries of data are incomplete or are trivial in regard to taxonomy classification.</i></p>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container direction=\"row\" justify=\"flex-end\">\r\n                    <Grid item className={classes.buttonContainer}>\r\n                        <Button variant=\"contained\" size=\"large\" color=\"primary\" className={classes.button}>\r\n                            <Link className={classes.buttonLink} to=\"/search/1\">Lets get started</Link>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nLandingPage.propTypes = {\r\n\r\n}\r\n\r\nexport default LandingPage\r\n","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\SearchPage.js",["96","97","98","99","100","101"],"import React, {useState,useRef,useEffect } from 'react'\r\n\r\nimport {useParams,Link} from \"react-router-dom\"\r\n\r\nimport {useFetch} from '../hooks/useFetch'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {Button, Paper,Grid} from '@material-ui/core/';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport PaginationItem from '@material-ui/lab/PaginationItem';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Search from '../components/Search';\r\nimport ListCard from '../components/ListCard';\r\nimport PageHeader from '../components/PageHeader';\r\nimport SectionHeader from '../components/SectionHeader';\r\nimport FilterMenu from '../components/FilterMenu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'flex-start',\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    cardContainer: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        marginTop: '10px'\r\n    },\r\n    buttonContainer: {\r\n        margin: '30px 0px'\r\n    },\r\n    buttonCat: {\r\n        margin: '10px',\r\n        textTransform: 'lowercase',\r\n        fontWeight: 'bold',\r\n        padding: '30px 0px',\r\n        minWidth: '220px'\r\n    },\r\n    buttonLearnMore: {\r\n        width: '100%',\r\n        borderTopLeftRadius: 0,\r\n        borderTopRightRadius: 0,\r\n        textTransform: 'lowercase'\r\n    },\r\n    searchContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        width: 'calc(100% - 30px)',\r\n        margin: '30px 10px',\r\n        alignItems: 'stretch'\r\n    },\r\n    section: {\r\n        width: '100%',\r\n        marginBottom: '40px'\r\n    },\r\n    link: {\r\n        textDecoration: 'none',\r\n        color: '#fff',\r\n        width: '100%'\r\n\r\n    },\r\n    paginationContainer :{\r\n        justifyContent: 'center',\r\n        display: 'flex',\r\n        margin: '20px'\r\n    },\r\n    paginationItem :{\r\n        backgroundColor: 'red',\r\n        margin: '0px 15px',\r\n        borderRadius: '5px',\r\n        width: '50px',\r\n        height: '50px',\r\n        backgroundColor: '#3f51b5',\r\n        color: '#fff'\r\n    },\r\n    headingImageContainer: {\r\n    },\r\n    headingImage: {\r\n        display: 'block',\r\n        borderRadius: '5px',\r\n        backgroundSize: 'cover',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundPosition: 'center',\r\n        width: '100%',\r\n        maxHeight: '290px',\r\n        minHeight: '290px',\r\n        objectFit: 'cover'\r\n    },\r\n    w100: {\r\n        width: '100%'\r\n    },\r\n    swatch6: {\r\n        backgroundColor:'#F9F7DB',color:'#333',padding: '10px',height: '100%', borderRadius: '5px',marginBottom: '5px'\r\n    },\r\n}));\r\n\r\nconst SearchPage = () => {\r\n    const classes = useStyles();\r\n\r\n    // Get page number from url\r\n    let { pageNumber } = useParams();\r\n\r\n    // Changes to page selection\r\n    const [page, setPage] = useState(parseInt(pageNumber));\r\n   \r\n    const pageChange = (e,value) => {\r\n        setPage(value);\r\n    }\r\n\r\n    // Changes to search query\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n\r\n    const searchChange = (e) => {\r\n        setSearchQuery(e.target.value);\r\n\r\n    }\r\n\r\n    const [requestEndpoint, setRequestEndpoint] = useState(`/api/v1/species/?page=${page}`)\r\n\r\n    const { data, loading, error, totalPages } = useFetch(\r\n        requestEndpoint,\r\n        [],\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Determine endpoint used\r\n        if(searchQuery != '') {\r\n            setRequestEndpoint(`/api/v1/species/search?q=${searchQuery}&page=${page}`)\r\n        } else {\r\n            setRequestEndpoint(`/api/v1/species/?page=${page}`)\r\n\r\n        }\r\n    }, [page, searchQuery])\r\n\r\n    const PlantResults = data.map((plant,i) => (\r\n        <ListCard \r\n        key={i}\r\n        title={plant.common_name} \r\n        subtext={plant.scientific_name} \r\n        imagePath={plant.image_url} \r\n        button={\r\n            <Link className={classes.link} to={`/plant/${plant.id}`}><Button variant=\"contained\" size=\"large\" color=\"primary\" className={classes.buttonLearnMore}>\r\n            View</Button> </Link>\r\n        }\r\n        />\r\n    ))\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <PageHeader \r\n                heading='Plants and Species'\r\n                subtext='Lorem ipsum dolor sit amet consectetur, adipisicing elit. Repellat vero, dicta labore sit ipsum corrupti natus! Quidem sint perferendis, beatae sit dicta, quasi non iure placeat asperiores, alias vel nesciunt. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Repellat vero, dicta labore sit ipsum corrupti natus! Quidem sint perferendis, beatae sit dicta, quasi non iure placeat asperiores, alias vel nesciunt.'\r\n            />\r\n            <section id=\"section-plant-of-day\" className={classes.section} >\r\n                <SectionHeader  \r\n                    heading='Plant of the Day'\r\n                    subtext='Lorem ipsum dolor sit amet consectetur, adipisicing elit. Repellat vero, dicta labore sit ipsum corrupti natus! Quidem sint perferendis, beatae sit dicta, quasi non iure placeat asperiores, alias vel nesciunt. '\r\n                />\r\n                <Paper elevation={0}>\r\n                    <Grid container direction=\"row\" justify=\"flex-start\" wrap=\"wrap\" alignItems=\"stretch\" spacing={1}>\r\n                            <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                                <Grid container className={classes.headingImageContainer} >\r\n                                    <img className={classes.headingImage} src={'/images/card-placeholder-305x240.png'} alt=\"\"/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6} md={8} lg={9}>\r\n                                <Grid container direction=\"column\" justify=\"flex-start\"  alignItems=\"stretch\">\r\n                                    <Grid className={classes.swatch6}>\r\n                                        <p><strong>Rank</strong> - </p>\r\n                                    </Grid>\r\n                                    <Grid className={classes.swatch6} item>\r\n                                        <p><strong>Family</strong> - </p>\r\n                                    </Grid>\r\n                                    <Grid className={classes.swatch6}>\r\n                                        <p><strong>Genus</strong> - </p>\r\n                                    </Grid>\r\n                                    <Grid className={classes.swatch6}>\r\n                                        <p><strong>Status</strong> - </p>\r\n                                    </Grid>\r\n                                    <Grid className={classes.swatch6}>\r\n                                        <p><strong>Discovered</strong> - </p>\r\n                                    </Grid>\r\n\r\n                                    \r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                </Paper>\r\n            </section>\r\n            <section id=\"section-popular-categories\" className={classes.section} >\r\n                <SectionHeader  \r\n                    heading='Popular Categories'\r\n                    subtext='Lorem ipsum dolor sit amet consectetur, adipisicing elit. Repellat vero, dicta labore sit ipsum corrupti natus! Quidem sint perferendis, beatae sit dicta, quasi non iure placeat asperiores, alias vel nesciunt. '\r\n                />\r\n                <div className={classes.buttonContainer}>\r\n                   \r\n                    <Link className={classes.link} to=\"/category/recent-discoveries\"> <Button variant=\"contained\" size=\"large\" color=\"primary\" className={classes.buttonCat}>recent discoveries</Button></Link>\r\n                    <Link className={classes.link} to=\"/category/oldest-discoveries\"> <Button variant=\"contained\" size=\"large\" color=\"primary\" className={classes.buttonCat}>oldest discoveries</Button></Link>\r\n                    <Link className={classes.link} to=\"/category/edible\"> <Button variant=\"contained\" size=\"large\" color=\"primary\" className={classes.buttonCat}>edible</Button></Link>\r\n                    <Link className={classes.link} to=\"/category/vegetables\"> <Button variant=\"contained\" size=\"large\" color=\"primary\" className={classes.buttonCat}>vegetables</Button></Link>\r\n                    <Link className={classes.link} to=\"/category/plants-by-rank\"> <Button variant=\"contained\" size=\"large\" color=\"primary\" className={classes.buttonCat}>plants by rank</Button></Link>\r\n                </div>\r\n            </section>\r\n            \r\n            <section id=\"section-search\" className={classes.section} >\r\n                <SectionHeader  \r\n                    heading='Search by Name'\r\n                    subtext=''\r\n                />\r\n                <div className={classes.searchContainer}>\r\n                    <Search \r\n                        id='search-bar'\r\n                        label='Search'\r\n                        placeholder='Enter a species or plant'\r\n                        disabled={false}\r\n                        handleChange={searchChange}\r\n                    />\r\n                    <FilterMenu/>\r\n                </div>\r\n                {(loading)?<h2>Loading</h2>:(\r\n                    <>\r\n                    <div className={classes.cardContainer}>\r\n                        {(PlantResults.length>0)?PlantResults:<h4>No results found.</h4>}\r\n             \r\n                    </div>\r\n                    {/* parseInt(totalPages.replace('/api/v1/species?page=','')) */}\r\n                    <Pagination className={classes.paginationContainer} count={20348} page={page} onChange={pageChange} renderItem={(item) => (\r\n                        <PaginationItem className={classes.paginationItem} component={Link} to={`/search/${item.page}`}{...item}/>)}\r\n                    />\r\n                    </>\r\n                    )\r\n                } \r\n            </section>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nSearchPage.propTypes = {\r\n\r\n}\r\n\r\nexport default SearchPage\r\n\r\n// Filters\r\n// -------\r\n// Common Name\r\n// Scientific_name\r\n// Edible\r\n// Vegetable \r\n// Author\r\n// Year\r\n// Family Name\r\n// Duration (Life Cycle)\r\n// Has scientific sources\r\n// Has images\r\n// Foliage\r\n// Fruit or Seeds\r\n// Produced Flowers\r\n\r\n// Range\r\n// -------\r\n// Max-Height\r\n// Ph-min-max\r\n\r\n// Order\r\n// Year\r\n// Scientific name","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\Search.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\ListCard.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\PageHeader.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\SectionHeader.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\FilterMenu.js",["102"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { withStyles,makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    filterButton: {\r\n        width: '100%',\r\n        height: '100%',\r\n        marginLeft: '10px'\r\n    }\r\n}));\r\n\r\nconst StyledMenu = withStyles({\r\n    paper: {\r\n      border: '1px solid #d3d4d5',\r\n    },\r\n  })((props) => (\r\n    <Menu\r\n      elevation={0}\r\n      getContentAnchorEl={null}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'center',\r\n      }}\r\n      transformOrigin={{\r\n        vertical: 'top',\r\n        horizontal: 'center',\r\n      }}\r\n      {...props}\r\n    />\r\n  ));\r\n  \r\n  const StyledMenuItem = withStyles((theme) => ({\r\n    root: {\r\n      '&:focus': {\r\n        backgroundColor: theme.palette.primary.main,\r\n        '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n          color: theme.palette.common.white,\r\n        },\r\n      },\r\n    },\r\n  }))(MenuItem);\r\n  \r\n  const FilterMenu = () => {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n  \r\n    const handleClick = (event) => {\r\n      setAnchorEl(event.currentTarget);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setAnchorEl(null);\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <Button\r\n          aria-controls=\"customized-menu\"\r\n          aria-haspopup=\"true\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          size=\"large\"\r\n          className={classes.filterButton}\r\n          onClick={handleClick}\r\n        >\r\n          Filters\r\n        </Button>\r\n        <StyledMenu\r\n          id=\"customized-menu\"\r\n          anchorEl={anchorEl}\r\n          keepMounted\r\n          open={Boolean(anchorEl)}\r\n          onClose={handleClose}\r\n        >\r\n          <StyledMenuItem>\r\n\r\n            <ListItemText primary=\"Sent mail\" />\r\n          </StyledMenuItem>\r\n          <StyledMenuItem>\r\n\r\n            <ListItemText primary=\"Drafts\" />\r\n          </StyledMenuItem>\r\n          <StyledMenuItem>\r\n   \r\n            <ListItemText primary=\"Inbox\" />\r\n          </StyledMenuItem>\r\n        </StyledMenu>\r\n      </div>\r\n    );\r\n  }\r\n\r\nFilterMenu.propTypes = {\r\n\r\n}\r\n\r\nexport default FilterMenu\r\n","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\PlantPage.js",["103","104","105","106"],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\containers\\CategoryPage.js",["107"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport PageHeader from '../components/PageHeader';\r\nimport SectionHeader from '../components/SectionHeader';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n}));\r\n\r\nconst CategoryPage = () => {\r\n    const classes = useStyles();\r\n    let { category } = useParams();\r\n    return (\r\n        <div>\r\n              <PageHeader \r\n                heading={category.split('-').join(' ')}\r\n                subtext='Lorem ipsum dolor sit amet consectetur, adipisicing elit. Repellat vero, dicta labore sit ipsum corrupti natus! Quidem sint perferendis, beatae sit dicta, quasi non iure placeat asperiores, alias vel nesciunt. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Repellat vero, dicta labore sit ipsum corrupti natus! Quidem sint perferendis, beatae sit dicta, quasi non iure placeat asperiores, alias vel nesciunt.'\r\n            />\r\n              <SectionHeader  \r\n                heading='Section'\r\n                subtext=''\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nCategoryPage.propTypes = {\r\n    category: PropTypes.string\r\n}\r\n\r\nexport default CategoryPage\r\n\r\n// On Load\r\n// ---------\r\n// Switch statement to determine category selected and return a request url per case\r\n// useEffect to retrieve plant data by request url\r\n// category needs to be in the url and passed as a prop for on page loads\r\n\r\n// Page Sections\r\n// ---------------\r\n\r\n\r\n// UI\r\n// ---------\r\n// Page will be broken into 12 grid layout\r\n// 3 points are for page nav which includes assess to sections\r\n// 9 points are for the pages content","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\hooks\\useFetch.js",[],"C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\ImageGallery.js",["108","109"],"import React from 'react'\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { makeStyles, withStyles  } from '@material-ui/core/styles';\r\n\r\nimport {AppBar,Tabs,Tab,Typography,Box} from '@material-ui/core';\r\n\r\nimport ImageGrid from './ImageGrid';\r\n\r\n// Panel in which images are placed.\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      \r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n  \r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n  \r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `scrollable-auto-tab-${index}`,\r\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    width: '100%',\r\n  },\r\n  tabContainer: {\r\n    boxShadow: 'none',\r\n    padding: '24px 24px'\r\n  },\r\n}));\r\n\r\nconst StyledTabs = withStyles({\r\n  indicator: {\r\n    display: 'none',\r\n   \r\n  },\r\n})((props) => <Tabs {...props} TabIndicatorProps={{ children: <span /> }} />);\r\n\r\nconst StyledTab = withStyles((theme) => ({\r\n  root: {\r\n    textTransform: 'none',\r\n    color: '#fff !important',\r\n    borderRadius: '5px',\r\n    background: '#707070',\r\n    marginRight: theme.spacing(1),\r\n    '&:focus': {\r\n      opacity: 1,\r\n    },\r\n  },\r\n}))((props) => <Tab disableRipple {...props} />);\r\n\r\nconst ImageGallery = ({imageArray}) => {\r\n    const classes = useStyles();\r\n    \r\n    const [value, setValue] = React.useState(0);\r\n  \r\n    const handleChange = (event, newValue) => {\r\n      setValue(newValue);\r\n    };\r\n\r\n    let imageCategories = Object.entries(imageArray);\r\n\r\n    // Not every plant will have images for each category so only create tabs for images found.\r\n    let tabs = imageCategories.map((cat,i) => {\r\n      if(cat[0] != '') {\r\n        return <StyledTab key={i} label={`${cat[0]}`} {...a11yProps(i)} />\r\n      }\r\n    });\r\n    \r\n    // Same as tabs.\r\n    let tabPanels = imageCategories.map((cat,i) => {\r\n      return <TabPanel key={i} value={value} index={i} className={classes.tabPanel}><ImageGrid images={cat[1]}/></TabPanel>\r\n    });\r\n    \r\n    return (\r\n      <div className={classes.root}>\r\n        <AppBar className={classes.tabContainer} position=\"static\" color=\"transparent\">\r\n          <StyledTabs\r\n            value={value}\r\n            onChange={handleChange}\r\n            indicatorColor=\"#fff\"\r\n            textColor=\"#fff\"\r\n            variant=\"scrollable\"\r\n            scrollButtons=\"auto\"\r\n            aria-label=\"Tabs for image gallery\"\r\n          >\r\n            {tabs}\r\n          </StyledTabs >\r\n        </AppBar>\r\n        {tabPanels}\r\n    </div>\r\n    )\r\n}\r\n\r\nImageGallery.propTypes = {\r\n    imageArray: PropTypes.array\r\n}\r\n\r\nexport default ImageGallery\r\n","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\ImageGrid.js",["110"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Grid} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n      image :{\r\n          width: '100%',\r\n          height: 'auto'\r\n      }\r\n  }));\r\n\r\nconst ImageGrid = ({images}) => {\r\n const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container justify=\"flex-start\" direction=\"row\" wrap=\"wrap\" spacing={1}>\r\n            {images.map((image, i) => (\r\n                <Grid key={i} item className={classes.imageContainer} xs={12} sm={6} lg={4}>\r\n                    <a href={image.image_url} target=\"_blank\">\r\n                    <img className={classes.image} src={image.image_url} alt={image.copyright} />\r\n                    </a>\r\n              \r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nImageGrid.propTypes = {\r\n    images: PropTypes.array\r\n}\r\n\r\nexport default ImageGrid\r\n","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\Map.js",["111","112"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\r\n\r\nimport {Grid,Paper} from '@material-ui/core';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: 'auto',\r\n        backgroundColor: '#F9F7DB',\r\n        borderRadius: '5px'\r\n    },\r\n}));\r\n\r\nconst geoUrl =\r\n  \"https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json\";\r\n\r\n\r\nconst Map = ({names}) => {\r\n    const classes = useStyles();\r\n\r\n    const displayColorForGeography = geography => {\r\n        if(names.native?.includes(geography.properties.name)) {\r\n            return \"#ED6A5A\"\r\n        }else if(names.introduced?.includes(geography.properties.name)) {\r\n            return \"#5D576B\"\r\n        }else if(names.doubtful?.includes(geography.properties.name)) {\r\n            return \"#F58B51\"\r\n        }else if(names.absent?.includes(geography.properties.name)) {\r\n            return \"#9BC1BC\"\r\n        }else if(names.extinct?.includes(geography.properties.name)) {\r\n            return \"#8AAE6F \"\r\n        }\r\n        return \"#E3BF95\";\r\n    }\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <ComposableMap\r\n            projectionConfig={{scale: 175, center: [18,0]}}\r\n            width={800}\r\n            height={600}\r\n        >\r\n           <Geographies geography={geoUrl}>\r\n            {({ geographies, projection }) =>\r\n                geographies\r\n                .map((geo,i) => (\r\n                    <Geography\r\n                    key={i}\r\n                    geography={geo}\r\n                    projection={projection}\r\n                    fill=\"#E3BF95\"\r\n                    stroke=\"#F9F7DB\"\r\n                    style={{\r\n                        default: {\r\n                            fill: displayColorForGeography(geo),\r\n                            outline: \"none\"\r\n                        },\r\n                        hover: {\r\n                            fill: displayColorForGeography(geo),\r\n                            outline: \"none\"\r\n                        },\r\n                        pressed: {\r\n                            fill: displayColorForGeography(geo),\r\n                            outline: \"none\"\r\n                        },\r\n                        }}\r\n                    />\r\n                ))\r\n            }\r\n            </Geographies>\r\n        </ComposableMap>\r\n     \r\n      </div>\r\n    )\r\n}\r\n\r\nMap.propTypes = {\r\n    names: PropTypes.array\r\n}\r\n\r\nexport default Map\r\n","C:\\Users\\austi\\Desktop\\react-plant-taxonomy\\src\\components\\Table.js",["113","114"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 650,\r\n    },\r\n  });\r\n\r\nconst PlantTable = ({headers,rows}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <TableContainer >\r\n            <Table className={classes.table} aria-label=\"Table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {headers.map((header) => (\r\n                            <TableCell><h4>{header}</h4></TableCell>\r\n                        ))}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                {rows.map((row,i) => (\r\n                    <TableRow key={i}>\r\n                        <TableCell align=\"left\">{(row.name)?row.name:<p>No name found.</p>}</TableCell>\r\n                        <TableCell align=\"left\">{(row.last_update)?row.name:<p>No updates found.</p>}</TableCell>\r\n                        <TableCell align=\"left\">{(row.url)?<a href={row.url} target=\"_blank\">View Website</a>:<p>No website found.</p>}\r\n                        </TableCell>\r\n                        <TableCell align=\"left\">{(row.citation)?row.citation:<p>No citation found.</p>}</TableCell>\r\n                    </TableRow>\r\n                ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nPlantTable.propTypes = {\r\n    headers: PropTypes.array,\r\n    rows: PropTypes.array\r\n}\r\n\r\nexport default PlantTable\r\n",{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":1,"column":42,"nodeType":"121","messageId":"122","endLine":1,"endColumn":48},{"ruleId":"119","severity":1,"message":"123","line":5,"column":21,"nodeType":"121","messageId":"122","endLine":5,"endColumn":26},{"ruleId":"119","severity":1,"message":"124","line":1,"column":25,"nodeType":"121","messageId":"122","endLine":1,"endColumn":31},{"ruleId":"119","severity":1,"message":"125","line":7,"column":8,"nodeType":"121","messageId":"122","endLine":7,"endColumn":17},{"ruleId":"126","severity":1,"message":"127","line":82,"column":9,"nodeType":"128","messageId":"129","endLine":82,"endColumn":24},{"ruleId":"119","severity":1,"message":"130","line":129,"column":28,"nodeType":"121","messageId":"122","endLine":129,"endColumn":33},{"ruleId":"119","severity":1,"message":"131","line":129,"column":35,"nodeType":"121","messageId":"122","endLine":129,"endColumn":45},{"ruleId":"132","severity":1,"message":"133","line":136,"column":24,"nodeType":"134","messageId":"129","endLine":136,"endColumn":26},{"ruleId":"119","severity":1,"message":"125","line":2,"column":8,"nodeType":"121","messageId":"122","endLine":2,"endColumn":17},{"ruleId":"119","severity":1,"message":"135","line":1,"column":16,"nodeType":"121","messageId":"122","endLine":1,"endColumn":25},{"ruleId":"119","severity":1,"message":"136","line":1,"column":26,"nodeType":"121","messageId":"122","endLine":1,"endColumn":34},{"ruleId":"119","severity":1,"message":"130","line":71,"column":39,"nodeType":"121","messageId":"122","endLine":71,"endColumn":44},{"ruleId":"137","severity":1,"message":"138","line":89,"column":37,"nodeType":"139","endLine":89,"endColumn":211},{"ruleId":"119","severity":1,"message":"140","line":15,"column":11,"nodeType":"121","messageId":"122","endLine":15,"endColumn":18},{"ruleId":"141","severity":1,"message":"142","line":89,"column":44,"nodeType":"143","messageId":"144","endLine":89,"endColumn":46},{"ruleId":"132","severity":1,"message":"133","line":90,"column":17,"nodeType":"134","messageId":"129","endLine":90,"endColumn":19},{"ruleId":"145","severity":1,"message":"146","line":21,"column":47,"nodeType":"147","endLine":21,"endColumn":62},{"ruleId":"119","severity":1,"message":"148","line":6,"column":9,"nodeType":"121","messageId":"122","endLine":6,"endColumn":13},{"ruleId":"119","severity":1,"message":"123","line":6,"column":14,"nodeType":"121","messageId":"122","endLine":6,"endColumn":19},{"ruleId":"119","severity":1,"message":"123","line":10,"column":8,"nodeType":"121","messageId":"122","endLine":10,"endColumn":13},{"ruleId":"145","severity":1,"message":"146","line":36,"column":78,"nodeType":"147","endLine":36,"endColumn":93},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Paper' is defined but never used.","'useRef' is defined but never used.","'PropTypes' is defined but never used.","no-dupe-keys","Duplicate key 'backgroundColor'.","ObjectExpression","unexpected","'error' is assigned a value but never used.","'totalPages' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'useEffect' is defined but never used.","'useState' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'classes' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'Grid' is defined but never used.","no-global-assign","no-unsafe-negation"]